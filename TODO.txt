# Vulthor TODO List

## Error Handling Improvements
- [ ] Migrate from `Box<dyn Error>` to custom error types using thiserror
  - [ ] Create VulthorError enum with variants for IO, Config, MailParser, Web errors
  - [ ] Update all Result types throughout codebase
  - [ ] Add context to errors (which file/folder caused the error)
  - [ ] Implement proper error recovery strategies

## Documentation Updates
- [x] Update README.md with comprehensive user documentation
  - [x] Installation instructions
  - [x] Usage examples with screenshots
  - [x] Configuration file format
  - [x] Keyboard shortcuts reference
  - [x] Add developer section at the end
- [x] Update CLAUDE.md with developer documentation
  - [x] Architecture decisions and preferences
  - [x] Code patterns and conventions
  - [x] Testing strategy (TDD approach)
  - [x] Future development guidelines
  - [x] Add reminder to keep README.md updated
  - [x] Document comment style preferences

## Future Features (Architecture Planning)
- [ ] Add account management system
  - [ ] Design account panel (left of folders)
  - [ ] Multiple MailDir source support
  - [ ] Account switching keybindings
- [ ] Integrate notmuch for search functionality
  - [ ] Design search interface
  - [ ] Notmuch query integration
  - [ ] Search results display
- [ ] Email composition and management
  - [ ] Reply/forward functionality
  - [ ] Mark as read/unread
  - [ ] Delete/move operations
  - [ ] Draft composition

## Performance Optimizations
- [ ] Implement proper email caching strategy
- [ ] Add configuration for email loading limits
- [ ] Profile and optimize folder scanning
- [ ] Consider async folder loading

## Testing Improvements
- [ ] Add integration tests for full workflows
- [ ] Test error scenarios comprehensively
- [ ] Add benchmarks for performance-critical paths
- [ ] Document testing requirements in CLAUDE.md

## Architecture Refactoring
- [ ] Migrate to component-based state management
  - [ ] Design component trait/interface for UI elements
  - [ ] Refactor each pane (Folders, List, Content) as independent components
  - [ ] Implement message passing between components
  - [ ] Create event bus or message queue for component communication
  - [ ] Remove global AppState enum in favor of component states
  - [ ] Consider using a framework like Elm-inspired architecture

## Async Migration
- [ ] Migrate entire codebase to async (long-term goal)
  - [ ] Convert MailDir scanning to async with tokio::fs
  - [ ] Make email parsing async
  - [ ] Unify TUI event loop with tokio runtime
  - [ ] Consider async TUI framework or custom implementation
  - [ ] Ensure no blocking operations in main thread

## Code Quality
- [ ] Add more comprehensive logging with tracing crate
- [ ] Document public APIs with rustdoc comments
- [ ] Consider splitting large modules (ui.rs, app.rs)
- [ ] Add CI/CD configuration